# Fall 2025 Detox Tracker - Cursor AI Rules

## Project Overview

This is a 30-day Detox Fall 2025 wellness tracking app for Russian-speaking users. It helps users track their daily progress through a detox protocol with meal logging, supplement tracking, and progress visualization.

## Tech Stack

- **Frontend Framework**: Angular 20.3.6 (standalone components)
- **Styling**: Tailwind CSS 4.x with custom cream/brand color palette
- **UI Components**: @tailwindplus/elements for dropdowns, modals, etc.
- **Backend**: Firebase
  - **Authentication**: Firebase Auth (email/password)
  - **Database**: Firestore (region: nam5 - Iowa)
  - **Image Storage**: Cloudinary (not Firebase Storage)
- **Charts**: Chart.js with ng2-charts
- **Language**: Russian UI (Cyrillic text)

## Project Structure

```
src/app/
├── core/
│   ├── guards/          # Auth guards (authGuard, publicGuard)
│   ├── models/          # TypeScript interfaces (UserProfile, DailyLog, Product)
│   ├── services/        # Business logic services
│   └── data/            # Static data (products catalog)
├── features/            # Feature modules (auth, home, daily-log, profile, etc.)
├── layout/              # Shell components (sidebar, top-bar, dashboard-shell)
└── app.routes.ts        # Route configuration
```

## Architecture Patterns

### Authentication Flow

1. **Firebase Authentication** handles login/signup
2. **UserService** manages user profiles in Firestore
3. Auth state changes trigger profile load/clear automatically
4. Guards protect routes: `authGuard` for authenticated routes, `publicGuard` for public routes

### User Profile

- **Model**: `UserProfile` interface with firstName, lastName, country, email, startDate
- **Storage**: Firestore collection `userProfiles` (document ID = Firebase Auth UID)
- **Service**: `UserService` handles all profile CRUD operations
- **Auto-sync**: Profile loads on login, clears on logout via callback pattern

### Data Services

- Use Angular signals for reactive state (`signal<T>()`)
- Async operations return Promises
- Services are `@Injectable({ providedIn: 'root' })`
- Firestore integration uses `@angular/fire/firestore`

### Product Catalog System

**Architecture:** Separation of types/interfaces from static data

- **Models** (`core/models/products.model.ts`):
  - `Product` interface - complete product schema
  - Type definitions: `RegionCode`, `ProductType`, `ProgramLevel`
  - `TakeInstruction` interface - structured dosage/timing info
  - `RegionVariant` interface - regional names/substitutes
- **Data** (`core/data/products.data.ts`):
  - `INITIAL_PRODUCTS` array - 8 core catalog products
  - Helper functions: `byRegion()`
  - Products stored as static data (no database needed for core catalog)

**Product Schema:**

```typescript
interface Product {
  id: string; // kebab-case slug
  name: string; // English canonical name
  description?: string;
  takes?: TakeInstruction[]; // dosage/timing instructions
  altName?: string;
  level?: ProgramLevel; // base | advanced
  regions?: Partial<Record<RegionCode, RegionVariant>>;
  region?: RegionCode[]; // availability by region
  type: ProductType; // supplement | essential_oil
  imageURL?: string; // filename only (ImageService builds full URL)
  optional?: boolean;
  source?: 'catalog' | 'user'; // catalog = immutable, user = editable
  userId?: string; // for user-created products
}
```

**Product Source Types:**

- `catalog` - Immutable core products from static data, read-only, no database storage
- `user` - Custom user products stored in Firestore (future feature), editable

**Catalog Products (8 total):**

1. VMG+™ (base) - vmg-plus.png
2. EO Mega™ (base) - eo-mega.png
3. PB Restore® (base) - pb-restore.png
4. TerraZyme™ (base) - terrazyme.png
5. GX Assist® (advanced) - gx-assist.png
6. DDR Prime® (advanced) - ddr-prime.png
7. RevitaZen™ Detoxification Blend (advanced) - revitazen-detox-blend.png
8. RevitaZen™ Advanced Organ Support (advanced) - revitazen-advanced-organ.png

## Firestore Structure

```
Firestore Database (nam5 region)
├── userProfiles/
│   └── {userId}/          # Document ID = Firebase Auth UID
│       ├── firstName: string
│       ├── lastName: string
│       ├── country: string
│       ├── email: string
│       └── startDate: string (ISO 8601: YYYY-MM-DD)
└── (future collections for daily logs, etc.)
```

## Firestore Security Rules

```javascript
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /userProfiles/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
  }
}
```

## Styling Conventions

### Color Palette (Tailwind)

- **Primary Brand**: `brand-*` (green/sage tones for CTAs and accents)
- **Background**: `cream-*` (soft neutral palette - 50, 100, 200, etc.)
- **Text**: `cream-900` for dark text, `cream-700` for secondary text
- **Icons**:
  - Primary icons: `cream-900` (soft alternative to black)
  - Secondary icons: `cream-800` (less prominent)
  - Tertiary/disabled: `cream-700` (placeholders, disabled states)
  - Accent icons: `brand-600` or `brand-700` (featured actions)
- **Fonts**:
  - Display/headings: `font-display`
  - Body text: `font-body`

### Component Structure

- Use standalone components (no modules)
- Import `CommonModule`, `FormsModule`, `RouterLink` as needed
- Use new Angular control flow: `@if`, `@for` (not *ngIf, *ngFor)
- Use signals for reactive state: `signal<T>()`, `.set()`, `()`

### Form Patterns

- Template-driven forms with `[(ngModel)]`
- Validation messages with signals: `errorMessage = signal<string>('')`
- Loading states: `isLoading = signal<boolean>(false)`
- Russian placeholder text and labels

## Routing Structure

```
/ (landing page - public, accessible to all)
/login (public with publicGuard)
/signup (public with publicGuard)
/onboarding (authenticated, separate from shell)
/dashboard (authenticated, inside dashboard-shell - uses HomeComponent)
/log-daily (authenticated, inside dashboard-shell)
/progress (authenticated, inside dashboard-shell)
/profile (authenticated, inside dashboard-shell)
```

**Home Component** (`/dashboard` route):

- Displays personalized welcome with user's first name
- Shows progress through 30-day program with visual progress bar
- Quick stats: days logged, current streak, completion percentage
- Phase indicator with Russian translations
- Quick action cards linking to daily log, progress, and profile
- Daily wellness tip
- All UI in Russian with cream/brand color palette

## Navigation Components

- **Sidebar**: Logo (links to /), navigation items (dashboard, daily log, progress, profile)
- **Top-bar**: User dropdown with profile link and logout
- **Logo behavior**: Clicking logo navigates to landing page (allowed for authenticated users)

## User Interface Language

- **ALL UI text in Russian (Cyrillic)**
- Form labels, buttons, error messages, navigation - everything in Russian
- Use professional, friendly tone appropriate for wellness app

## Firebase Configuration

- Project ID: `detox-fall-2025`
- Environment config in: `src/environments/environment.ts`
- Firestore region: `nam5` (us-central1 - Iowa)
- Auth provider: Email/Password (enabled)

## Cloudinary Configuration

**Service:** Image delivery and transformations (product images, future user uploads)

**Configuration:**

- Cloud Name: `djnvzdffx`
- Base Folder: `detox-fall`
- Products Folder: `detox-fall/products/`
- Environment files: `src/environments/environment.ts` and `environment.prod.ts`

**ImageService** (`core/services/image.service.ts`):

- Central service for all image URL generation
- Handles Cloudinary transformations (width, height, quality, format)
- Supports local assets fallback if Cloudinary not configured
- Methods:
  - `getProductImage(filename, options?)` - Product images with transformations
  - `getProfileImage(filename, size?)` - User avatars (future)
  - `getAssetImage(filename)` - General assets
  - `getPlaceholder(type)` - Placeholder images

**Image URL Pattern:**

```
https://res.cloudinary.com/{cloudName}/image/upload/{transformations}/{folder}/products/{filename}
```

**Transformations:**

```typescript
imageService.getProductImage('vmg-plus.png', {
  width: 300, // resize width
  height: 300, // resize height
  quality: 80, // compression quality
  format: 'webp', // force format conversion
});
```

**Current Format:** PNG (all 8 product images uploaded as PNG)
**Future Optimization:** Can use `f_auto` for automatic WebP/PNG delivery based on browser

**Folder Structure in Cloudinary:**

```
detox-fall/
├── products/         # 8 catalog product images (PNG format)
├── profiles/         # Future: user avatars
└── assets/           # Future: misc images
```

**Important Notes:**

- Product images stored in Cloudinary (not Firebase Storage)
- ImageService automatically falls back to `/assets/` if Cloudinary not configured
- User-uploaded images (future) will use full URLs, service passes them through
- Always use ImageService, never hardcode Cloudinary URLs

## Code Style Preferences

1. **TypeScript**: Use strict typing, interfaces for models
2. **Async/Await**: Prefer async/await over promises chains
3. **Error Handling**: Try-catch blocks with user-friendly error messages in Russian
4. **Console Logging**: Use console.log/error for debugging, include descriptive messages
5. **Comments**: Add JSDoc comments for service methods
6. **File Naming**: kebab-case for files (e.g., `user.service.ts`, `edit-profile.component.ts`)

## Common Patterns

### Service Method Pattern

```typescript
async methodName(param: Type): Promise<ReturnType> {
  try {
    // Validation
    if (!param) {
      console.error('Descriptive error message');
      throw new Error('User-friendly message in Russian');
    }

    // Business logic
    const result = await someAsyncOperation();

    // Update state
    this.stateSignal.set(result);

    return result;
  } catch (error) {
    console.error('Error message:', error);
    throw error;
  }
}
```

### Component Pattern

```typescript
@Component({
  selector: 'app-component-name',
  standalone: true,
  imports: [CommonModule, FormsModule, RouterLink],
  templateUrl: './component-name.component.html',
  styles: [],
})
export class ComponentNameComponent {
  // Signals for reactive state
  isLoading = signal<boolean>(false);
  errorMessage = signal<string>('');

  constructor(private service: Service, private router: Router) {}

  async onSubmit(): Promise<void> {
    // Implementation
  }
}
```

## Important Notes

- **No localStorage**: User profiles stored in Firestore, not localStorage
- **Auth Timing**: Pass userId directly to avoid timing issues with getCurrentUser()
- **Disabled Fields**: Email field in profile is disabled (tied to Firebase Auth)
- **Form Validation**: Email not required in validation if it's disabled
- **Navigation**: Landing page accessible to everyone (modified publicGuard)

## Future Features to Consider

- Daily log tracking (meals, supplements, symptoms)
- Progress charts and visualization
- Product recommendations with Cloudinary images
- Weekly reports and insights
- Community features or coach integration

## Dependencies

Key packages:

- `@angular/fire` (20.0.1) - Firebase integration
- `@tailwindcss/postcss` (4.1.13) - Styling
- `@tailwindplus/elements` (1.0.14) - UI components
- `chart.js` (4.5.0) + `ng2-charts` (8.0.0) - Charts
- `firebase` (11.10.0) - Firebase SDK

## Development Commands

- `npm start` - Start dev server
- `npm run build` - Production build
- `npm run watch` - Build with watch mode
